name: pytest and coverage

on:
  push:
    branches:
      - main
  pull_request_target:
  workflow_dispatch:

jobs:
  tests:
    name: pytest and coverage report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5.0.0
        with:
          # For pull_request_target we must manually checkout the PR's head commit;
          # fall back to the current SHA for push / manual dispatch events.
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          fetch-depth: 0

      - name: Debug GitHub Variables
        run: |
            echo "github.event_name: ${{ github.event_name }}"
            echo "github.ref_name: ${{ github.ref_name }}"
            echo "github.event.repository.default_branch: ${{ github.event.repository.default_branch }}"
            echo "github.event.pull_request.head.sha: ${{ github.event.pull_request.head.sha }}"
            echo "github.sha: ${{ github.sha }}"

      - name: Setup Python 3 (with caching)
        uses: actions/setup-python@v6.0.0
        with:
          python-version: 3.x
          cache: 'pip'
          cache-dependency-path: |
            requirements-dev.txt
            requirements.txt
            pyproject.toml
            .pre-commit-config.yaml

      - name: Install Requirements
        run: python -m pip install --upgrade pip && pip install -r requirements-dev.txt

      - name: Run pytest with coverage (pytest-cov)
        run: pytest

      - name: "Debug: list coverage artifacts"
        if: ${{ always() }}
        run: |
          echo "-- After pytest, checking for coverage outputs --"
          find . -maxdepth 1 -mindepth 1 -printf 'ROOT: %f\n' | sort
          echo "Listing .coverage* (if any):"
          if compgen -G ".coverage*" > /dev/null; then
            ls -la -- .coverage*
          else
            echo "No raw coverage data files yet"
          fi
          if [ -f coverage.xml ]; then
            echo "coverage.xml present (generated by pytest-cov)"
          else
            echo "coverage.xml missing"
          fi

      - name: Verify coverage data file exists
        id: check_cov
        run: |
          if [ -f .coverage ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "WARNING: .coverage file missing"
          fi

      - name: Upload coverage data
        if: steps.check_cov.outputs.exists == 'true'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: coverage-data-${{ github.run_id }}-${{ github.job }}
          path: |
            .coverage
            coverage.xml
            pytest.xml
            htmlcov/
          if-no-files-found: ignore

      - name: PR coverage comment
        if: ${{ github.event_name == 'pull_request_target' && steps.check_cov.outputs.exists == 'true' }}
        uses: MishaKav/pytest-coverage-comment@v1.1.57
        # uses: eltoder/pytest-coverage-comment@feature/branch-coverage
        with:
          pytest-xml-coverage-path: ./coverage.xml
          junitxml-path: ./pytest.xml
          remove-link-from-badge: true
          # xml-skip-covered: true
          remove-links-to-lines: true
          report-only-changed-files: true
          # badge-title: Branch Coverage
