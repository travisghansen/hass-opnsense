name: pytest and coverage

on:
  push:
    branches:
      - main
  pull_request_target:
  workflow_dispatch:

jobs:
  tests:
    name: pytest and coverage report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5.0.0

      - name: Set up Python 3
        uses: actions/setup-python@v6.0.0
        with:
          python-version: 3.x

      - name: Cache pip dependencies
        uses: actions/cache@v4.2.3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt', 'requirements.txt', 'pyproject.toml', '.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: python -m pip install --upgrade pip && pip install -r requirements-dev.txt

      - name: Run pytest with coverage (pytest-cov)
        run: pytest

      - name: "Debug: list coverage artifacts"
        if: ${{ always() }}
        run: |
          echo "-- After pytest, checking for coverage outputs --"
          find . -maxdepth 1 -mindepth 1 -printf 'ROOT: %f\n' | sort
          echo "Listing .coverage* (if any):"
          if compgen -G ".coverage*" > /dev/null; then
            ls -la -- .coverage*
          else
            echo "No raw coverage data files yet"
          fi
          if [ -f coverage.xml ]; then
            echo "coverage.xml present (generated by pytest-cov)"
          else
            echo "coverage.xml missing"
          fi

      - name: "Debug: list workspace and coverage files"
        if: ${{ always() }}
        run: |
          echo "--- Workspace root listing ---"
          ls -la . || true
          echo "--- Looking for .coverage* files ---"
          shopt -s nullglob || true
          files=(.coverage*)
          if [ ${#files[@]} -gt 0 ]; then
            echo "Found coverage files:" "${files[*]}"
            if compgen -G ".coverage*" > /dev/null; then
              ls -la -- .coverage* || true
            else
              echo "No .coverage* files to list"
            fi
          else
            echo "No .coverage* files found"
          fi

      - name: Verify coverage data file exists
        id: check_cov
        run: |
          if [ -f .coverage ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "WARNING: .coverage file missing"
          fi

      - name: Upload coverage data
        if: steps.check_cov.outputs.exists == 'true'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: coverage-data-${{ github.run_id }}-${{ github.job }}
          path: |
            .coverage
            coverage.xml
            pytest.xml
            htmlcov/
          if-no-files-found: ignore

      - name: PR coverage comment
        if: ${{ github.event_name == 'pull_request' && steps.check_cov.outputs.exists == 'true' }}
        # uses: MishaKav/pytest-coverage-comment@main
        uses: eltoder/pytest-coverage-comment@feature/branch-coverage
        with:
          pytest-xml-coverage-path: ./coverage.xml
          junitxml-path: ./pytest.xml
          remove-link-from-badge: true
          badge-title: Branch Coverage
